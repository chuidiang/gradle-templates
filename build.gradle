//import templates.TemplatesPlugin

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'

version = '1.2'
group = 'gradle-templates'

repositories { mavenCentral() }

configurations { deployerJars }

dependencies {
	compile gradleApi()
	groovy localGroovy()
	// used to upload artifacts to artifactory.
	deployerJars "org.apache.maven.wagon:wagon-http:1.0-beta-2"
}

task('unversionedJar', type: Jar, dependsOn: 'jar') {
	version = null
	from sourceSets.main.classes
}

task('installPlugin', type: Copy, dependsOn: 'unversionedJar') {
	def gradleInstallDir = gradle.gradleHomeDir
	group = 'installation'
	description = 'Installs the plugin jar in your gradle distribution.'
	from "${buildDir}/libs/${unversionedJar.archiveName}"
	into "/${gradleInstallDir}/lib/plugins"
}

installPlugin.doLast {
	def gradleInstallDir = gradle.gradleHomeDir
	println "Installed in: ${gradleInstallDir}/lib/plugins as: ${unversionedJar.archiveName}"
}

task('uninstallPlugin', type: Delete) {
	def gradleInstallDir = gradle.gradleHomeDir
	group = 'installation'
	description = 'Removes the plugin from your gradle distribution.'
	delete("/${gradleInstallDir}/lib/plugins/${unversionedJar.archiveName}")
}

// creates the sources.jar
task('sourcesJar', type: Jar, dependsOn: 'classes') {
	classifier = 'sources'
	from sourceSets.main.allSource
}

// creates the javadoc.jar
task('javadocJar', type: Jar, dependsOn: 'javadoc') {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

// creates the javadoc.jar
task('groovydocJar', type: Jar, dependsOn: 'groovydoc') {
	classifier = 'groovydoc'
	from groovydoc.destinationDir
}
// Set up gradle to upload source and javadoc jars.
artifacts {
	archives sourcesJar
	archives javadocJar
	archives groovydocJar
}

// Tell gradle to build sources and javadoc jars when uploading to repository.
uploadArchives.dependsOn sourcesJar
uploadArchives.dependsOn javadocJar
uploadArchives.dependsOn groovydocJar
if (project.hasProperty('mavenRepoUrl')) {
	uploadArchives {
		repositories.mavenDeployer {
			configuration = configurations.deployerJars
			repository url: project.getProperty('mavenRepoUrl')
		}
	}
}

task('prompts') << {
	println TemplatesPlugin.prompt('What is your favorite color?')
	println TemplatesPlugin.prompt('What is your favorite color?', 'Green')
	def options = ['Red', 'Green', 'Blue']
	println options[TemplatesPlugin.promptOptions('R, G, or B?', options)]
	println options[TemplatesPlugin.promptOptions('R, G, or B?', 3, options)]
	println TemplatesPlugin.promptYesOrNo('Did this work for you?')
	println TemplatesPlugin.promptYesOrNo('Did this work for you?', true)
	println TemplatesPlugin.promptYesOrNo('Did this work for you?', false)
}
